@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IHttpClientFactory ClientFactory

@using OneInc.Common.Model;

<PageTitle>Index</PageTitle>

<h1>String Encoder</h1>

<EditForm Model="@encodedString">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="txtString">String to Encode</label>
        <InputText id="txtString" @bind-Value="encodedString.Id" class="form-control" />
        <ValidationMessage For="() => encodedString.Id" />
    </div>
    <hr />
    @if (cmdStartDisableState == true)
    {
        <button class="btn btn-primary" @onclick="cmdStart" disabled>Start Encoding </button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="cmdStart">Start Encoding</button>
    }

    <button class="btn btn-secondary" @onclick="cmdStop">Stop Encoding</button>
</EditForm>
@code {
    private EncodedString encodedString = new();
    bool cmdStartDisableState = false;
    bool encodingInProcess = false;
    static CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    CancellationToken token = cancellationTokenSource.Token;
    static int cont = 0;
    private async void cmdStart()
    {
        if (!string.IsNullOrEmpty(encodedString.Id))
        {
            cmdStartDisableState = true;
            encodingInProcess = true;
            var cachedValue = await IsCached(encodedString.Id);
            if (cachedValue.found)
            {
                await GetEncoded(cachedValue.encodedString.ToString(), token);
            }
            else
            {

            }

            return;
        }
        var strToEncode = encodedString.Id;
    }

    private async void cmdStop()
    {
        cancellationTokenSource.Cancel();
        cmdStartDisableState = false;
    }

    private async Task GetEncoded(string encoded, CancellationToken token)
    {
        try
        {


            while (!token.IsCancellationRequested)
            {
                await Task.Delay(10);
                cont++;
            }


        }
        catch (OperationCanceledException)
        {
            
            var canceled = true;
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            var canceled = true;
        }
    }

    private async Task<(EncodedString? encodedString, bool found)> IsCached(string id)
    {
        HttpClientHandler clientHandler = new HttpClientHandler();
        clientHandler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => { return true; };

        // Pass the handler to httpclient(from you are calling api)
        HttpClient client = new HttpClient(clientHandler);

        var response = await client.GetAsync($"https://oneincapi/api/EncodedStrings/{id}", HttpCompletionOption.ResponseHeadersRead);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    DictionaryKeyPolicy = JsonNamingPolicy.CamelCase,
                    WriteIndented = true
                };

            var responseString = await response.Content.ReadAsStringAsync(CancellationToken.None);
            var res = JsonSerializer.Deserialize<EncodedString>(responseString);
            return (res, true);
        }
        else
        {
            return (null, false);
        }
    }

}
